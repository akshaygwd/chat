[{"D:\\project\\Chat\\client\\src\\index.js":"1","D:\\project\\Chat\\client\\src\\App.js":"2","D:\\project\\Chat\\client\\src\\pages\\Register.js":"3","D:\\project\\Chat\\client\\src\\ApolloProvider.js":"4","D:\\project\\Chat\\client\\src\\pages\\Login.js":"5","D:\\project\\Chat\\client\\src\\context\\auth.js":"6","D:\\project\\Chat\\client\\src\\util\\DynamicRoutes.js":"7","D:\\project\\Chat\\client\\src\\pages\\Home\\Home.js":"8","D:\\project\\Chat\\client\\src\\pages\\Home\\User.js":"9","D:\\project\\Chat\\client\\src\\context\\message.js":"10","D:\\project\\Chat\\client\\src\\pages\\Home\\Message.js":"11","D:\\project\\Chat\\client\\src\\pages\\Home\\Msg.js":"12"},{"size":199,"mtime":1607345131953,"results":"13","hashOfConfig":"14"},{"size":1055,"mtime":1608201638280,"results":"15","hashOfConfig":"14"},{"size":3448,"mtime":1607443245550,"results":"16","hashOfConfig":"14"},{"size":1458,"mtime":1608532550532,"results":"17","hashOfConfig":"14"},{"size":2685,"mtime":1608533159431,"results":"18","hashOfConfig":"14"},{"size":1361,"mtime":1608215292877,"results":"19","hashOfConfig":"14"},{"size":460,"mtime":1607764031229,"results":"20","hashOfConfig":"14"},{"size":1853,"mtime":1608532391331,"results":"21","hashOfConfig":"14"},{"size":2094,"mtime":1608369765744,"results":"22","hashOfConfig":"14"},{"size":2050,"mtime":1608533292770,"results":"23","hashOfConfig":"14"},{"size":3347,"mtime":1608531925718,"results":"24","hashOfConfig":"14"},{"size":1001,"mtime":1608367874931,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"13goi7c",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"D:\\project\\Chat\\client\\src\\index.js",[],["58","59"],"D:\\project\\Chat\\client\\src\\App.js",["60"],"import React from 'react';\nimport './App.scss';\nimport { Container } from 'react-bootstrap';\nimport ApolloProvider from './ApolloProvider';\nimport Register from './pages/Register';\nimport Login from './pages/Login';\nimport Home from './pages/Home/Home';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { AuthProvider } from './context/auth';\nimport { MessageProvider } from './context/message';\nimport DynamicRoute from './util/DynamicRoutes';\n\nfunction App() {\n  return (\n    <ApolloProvider>\n      <AuthProvider>\n        <MessageProvider>\n          <BrowserRouter>\n            <Container className=\"pt-5\">\n              <Switch>\n                <DynamicRoute path=\"/\" exact component={Home} authenticated />\n                <DynamicRoute path=\"/register\" component={Register} guest/>\n                <DynamicRoute path=\"/login\" component={Login} guest/>\n              </Switch>\n            </Container>\n          </BrowserRouter>\n        </MessageProvider>\n      </AuthProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","D:\\project\\Chat\\client\\src\\pages\\Register.js",[],"D:\\project\\Chat\\client\\src\\ApolloProvider.js",[],"D:\\project\\Chat\\client\\src\\pages\\Login.js",[],"D:\\project\\Chat\\client\\src\\context\\auth.js",[],"D:\\project\\Chat\\client\\src\\util\\DynamicRoutes.js",[],"D:\\project\\Chat\\client\\src\\pages\\Home\\Home.js",["61","62","63","64"],"import React, { useEffect } from 'react';\r\nimport { Row, Col, Button, Image } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useAuthDispatch, useAuthState } from '../../context/auth';\r\nimport { useMessageDispatch } from '../../context/message';\r\nimport { gql, useSubscription } from '@apollo/client';\r\nimport User from './User';\r\nimport Message from './Message';\r\n\r\nconst NEW_MESSAGE = gql`\r\n  subscription newMessage{\r\n    newMessage {\r\n      from\r\n      uuid\r\n      to\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\n\r\nfunction Home(props) {\r\n  const { user } = useAuthState();\r\n  const authDispatch = useAuthDispatch();\r\n  const messageDispatch = useMessageDispatch();\r\n\r\n  const { data: messageData, error: messageError } = useSubscription(NEW_MESSAGE);\r\n\r\n  useEffect(() => {\r\n    if(messageError) console.log(messageError);\r\n    if(messageData) {\r\n      const message = messageData.newMessage;\r\n      const otherUser = user.username == message.to ? message.from: message.to;\r\n\r\n      messageDispatch({type: 'ADD_MESSAGE', payload:\r\n        {\r\n          username: otherUser,\r\n          message: messageData.newMessage\r\n        }\r\n      });\r\n    }\r\n  }, [messageData, messageError])\r\n\r\n  const logout = () => {\r\n    authDispatch({type: 'LOGOUT'});\r\n    window.location.herf = '/login';\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Row className=\"bg-white justify-content-around mb-1\">\r\n      <Link to=\"/login\">\r\n        <Button varient=\"link\">\r\n          Login\r\n        </Button>\r\n      </Link>\r\n      <Link to=\"/register\">\r\n        <Button varient=\"link\">\r\n          Register\r\n        </Button>\r\n      </Link>\r\n      <Button onClick={logout} variant=\"link\">\r\n        Logout\r\n      </Button>\r\n    </Row>\r\n    <Row className=\"bg-white\">\r\n      <User />\r\n      <Message  />\r\n    </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;","D:\\project\\Chat\\client\\src\\pages\\Home\\User.js",["65","66","67"],"import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { Row, Col, Button, Image } from 'react-bootstrap';\r\nimport { useMessageDispatch } from '../../context/message';\r\nimport { useMessageState } from '../../context/message';\r\nimport classNames from 'classnames';\r\n\r\nconst GET_USERS = gql `\r\n  query getUsers{\r\n    getUsers {\r\n      username\r\n      imageUrl\r\n      email\r\n      createdAt\r\n      latestMessage {\r\n        from\r\n        uuid\r\n        to\r\n        content\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Users() {\r\n\r\n  const dispatch = useMessageDispatch();\r\n  const { users } = useMessageState();\r\n  const selectedUser = users?.find(u => u.selected == true)?.username;\r\n  const { loading } = useQuery(GET_USERS, {\r\n    onCompleted: data => dispatch({\r\n      type: 'SET_USERS',\r\n      payload: data.getUsers\r\n    }),\r\n    onError: err => console.log(err)\r\n  });\r\n\r\n  let userMarkup;\r\n  if(!users || loading) {\r\n    userMarkup = <p>Loading...</p>\r\n  } else if (users.length === 0) {\r\n    userMarkup = <p>No users have join yet</p>\r\n  } else if (users.length > 0) {\r\n    userMarkup = users.map((user) => {\r\n      const selected = selectedUser === user.username;\r\n      return (\r\n        <div  role=\"button\"\r\n        className={classNames(\" d-flex p-3 user-dev justify-content-center justify-content-md-start\", {'bg-white': selected})}\r\n        key={user.username} onClick={() => dispatch({type: 'SET_SELECTED_USER', payload: user.username})}>\r\n        <Image\r\n          src={user.imageUrl || 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y'}\r\n          className=\"user-image\"/>\r\n        <div className=\"d-none d-md-block ml-2\">\r\n          <p className=\"text-success\">{user.username}</p>\r\n          <p className=\"font-weight-light\">\r\n            {user.latestMessage ? user.latestMessage.content : 'You are now connected!'}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      )\r\n    })\r\n  }\r\n\r\n  return(\r\n    <Col xs={2} md={4} className=\"user-box p-0 bg-secondary\">\r\n      {userMarkup}\r\n    </Col>\r\n  )\r\n}","D:\\project\\Chat\\client\\src\\context\\message.js",["68","69"],"import React, { createContext, useReducer, useContext } from 'react';\r\nconst MessageStateContext = createContext();\r\nconst MessageDispatchContext = createContext();\r\n\r\nconst messageReducer = (state, action) => {\r\n  let userCopy, userIndex;\r\n  const { username, message, messages } = action.payload;\r\n  switch(action.type) {\r\n    case \"SET_USERS\":\r\n        return {\r\n            ...state,\r\n            users: action.payload\r\n        }\r\n    case 'SET_USER_MESSAGE':\r\n        userCopy = [...state.users];\r\n        userIndex = userCopy.findIndex(u => u.username == username);\r\n        userCopy[userIndex] = { ...userCopy[userIndex], messages }\r\n        console.log(userCopy, 'userCopy');\r\n        return {\r\n          ...state,\r\n          users: userCopy\r\n        }\r\n\r\n    case 'ADD_MESSAGE':\r\n      userCopy = [...state.users];\r\n      userIndex = userCopy.findIndex( u => u.username == username);\r\n\r\n      let newUser = {\r\n        ...userCopy[userIndex],\r\n        messages: userCopy[userIndex].messages ? [message, ...userCopy[userIndex].messages] : null,\r\n        latestMessage: message,\r\n      }\r\n\r\n      userCopy[userIndex] = newUser;\r\n      console.log(userCopy, 'updated');\r\n\r\n      return {\r\n        ...state,\r\n        users: userCopy\r\n      }\r\n\r\n    case 'SET_SELECTED_USER':\r\n      userCopy = state.users.map((user) => {\r\n        return {\r\n          ...user,\r\n          selected: user.username === action.payload\r\n        }\r\n      })\r\n      return {\r\n        ...state,\r\n        users: userCopy\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const MessageProvider = (props) => {\r\n  const [state, dispatch] = useReducer(messageReducer, {users: null});\r\n  return(\r\n    <MessageDispatchContext.Provider value={dispatch}>\r\n      <MessageStateContext.Provider value={state}>\r\n        {props.children}\r\n      </MessageStateContext.Provider>\r\n    </MessageDispatchContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useMessageState = () => useContext(MessageStateContext);\r\nexport const useMessageDispatch = () => useContext(MessageDispatchContext);","D:\\project\\Chat\\client\\src\\pages\\Home\\Message.js",["70","71","72","73","74","75","76","77","78"],"import React, { useEffect, useState } from 'react';\r\nimport { Row, Col, Button, Image, Form } from 'react-bootstrap';\r\nimport { gql, useQuery, useLazyQuery, useMutation } from '@apollo/client';\r\nimport { useMessageDispatch } from '../../context/message';\r\nimport { useMessageState } from '../../context/message';\r\nimport Msg from './Msg';\r\n\r\nconst GET_MESSAGES = gql`\r\nquery getMessage($from: String!) {\r\n  getMessage(from: $from) {\r\n    from\r\n    uuid\r\n    to\r\n    content\r\n    createdAt\r\n  }\r\n}\r\n`;\r\n\r\nconst SEND_MESSAGE = gql`\r\n  mutation sendMessage($to: String!, $content: String!) {\r\n    sendMessage(to: $to, content: $content) {\r\n      from\r\n      uuid\r\n      to\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Message() {\r\n  const [content, setContent] = useState('');\r\n  const { users } = useMessageState();\r\n  const dispatch  = useMessageDispatch();\r\n  const selectedUser = users?.find(u => u.selected == true);\r\n  const [getMessages, {loading: msgLoading, data:messageData}] = useLazyQuery(GET_MESSAGES);\r\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\r\n    onError: err => console.log(err)\r\n  });\r\n  const messages = selectedUser?.messages;\r\n\r\n  let selectedChatMAarkup\r\n  if(!messages && !msgLoading) {\r\n    selectedChatMAarkup = <p className=\"info-text\">select a friend</p>;\r\n  }else if(msgLoading) {\r\n    selectedChatMAarkup = <p className=\"info-text\">...loading</p>;\r\n  }else if(messages.length > 0) {\r\n    selectedChatMAarkup = messages.map((message, index) => (\r\n      <>\r\n        <Msg key={message.uuid} message={message}/>\r\n        {index === messages.length - 1 && (\r\n          <div className=\"invisible\">\r\n            <hr className=\"m-0\" />\r\n          </div>\r\n        )}\r\n      </>\r\n    ))\r\n  }else if(messages.length == 0) {\r\n    selectedChatMAarkup = <p className=\"info-text\">You are now connected</p>;\r\n  }\r\n  useEffect(() => {\r\n    console.log(selectedUser, 'hit');\r\n    if(selectedUser && !selectedUser.message) {\r\n      getMessages({variables: {from: selectedUser.username}})\r\n    }\r\n  }, [selectedUser]);\r\n\r\n  if(messageData) {\r\n    console.log(messageData, 'hie');\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(messageData) {\r\n      dispatch({type: 'SET_USER_MESSAGE', payload: {\r\n        username: selectedUser.username,\r\n        messages: messageData.getMessage\r\n      }})\r\n    }\r\n  }, [messageData]);\r\n\r\n  const submitMessage = e => {\r\n    e.preventDefault();\r\n    if(content.trim() == '' || !selectedUser) return;\r\n    sendMessage({variables: {to: selectedUser.username, content: content}})\r\n  }\r\n\r\n  return (\r\n    <Col xs={10} md={8} style={{height: '500px'}}>\r\n      <div className=\"message-box d-flex flex-column-reverse\">\r\n        {\r\n         selectedChatMAarkup\r\n        }\r\n      </div>\r\n      <div>\r\n        <Form onSubmit={submitMessage}>\r\n          <Form.Group className=\"d-flex align-items-center\">\r\n            <Form.Control\r\n              type=\"text\"\r\n              className=\"msg-input p-4 rounded-pill bg-secondary border-0\"\r\n              placeholder=\"Type a message..\"\r\n              value={content}\r\n              onChange={e => setContent(e.target.value)}\r\n            />\r\n            <i onClick={submitMessage}\r\n            className=\"fas fa-paper-plane fa-2x text-primary ml-2\" role=\"button\"></i>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n    </Col>\r\n  )\r\n}","D:\\project\\Chat\\client\\src\\pages\\Home\\Msg.js",["79","80"],"import React from 'react';\r\nimport { useAuthState } from '../../context/auth';\r\nimport classNames from 'classnames';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport moment from 'moment';\r\n\r\nexport default function Msg({message}) {\r\n  const { user } = useAuthState();\r\n  const sent = message.from == user.username;\r\n  const recevied = !sent;\r\n  return (\r\n    <OverlayTrigger\r\n      placement=\"left\"\r\n      placement={sent ? 'left': 'right'}\r\n      overlay={\r\n        <Tooltip>\r\n          {moment(message.createdAt).format('MMMM DD, YYYY @ h:mm a')}\r\n        </Tooltip>\r\n      }\r\n      >\r\n      <div className={classNames('d-flex my-3', {\r\n        'ml-auto': sent,\r\n        'mr-auto': recevied\r\n      })}>\r\n        <div className={classNames('py-2 px-3 rounded-pill bg-primary',\r\n          { 'bg-primary': sent, 'bg-secondary': recevied })}>\r\n          <p className={classNames({'text-white': sent})}>{message.content}</p>\r\n        </div>\r\n      </div>\r\n    </OverlayTrigger>\r\n  )\r\n}",["81","82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":8,"column":25,"nodeType":"89","messageId":"90","endLine":8,"endColumn":30},{"ruleId":"87","severity":1,"message":"91","line":2,"column":15,"nodeType":"89","messageId":"90","endLine":2,"endColumn":18},{"ruleId":"87","severity":1,"message":"92","line":2,"column":28,"nodeType":"89","messageId":"90","endLine":2,"endColumn":33},{"ruleId":"93","severity":1,"message":"94","line":36,"column":39,"nodeType":"95","messageId":"96","endLine":36,"endColumn":41},{"ruleId":"97","severity":1,"message":"98","line":45,"column":6,"nodeType":"99","endLine":45,"endColumn":33,"suggestions":"100"},{"ruleId":"87","severity":1,"message":"101","line":3,"column":10,"nodeType":"89","messageId":"90","endLine":3,"endColumn":13},{"ruleId":"87","severity":1,"message":"102","line":3,"column":20,"nodeType":"89","messageId":"90","endLine":3,"endColumn":26},{"ruleId":"93","severity":1,"message":"94","line":30,"column":52,"nodeType":"95","messageId":"96","endLine":30,"endColumn":54},{"ruleId":"93","severity":1,"message":"94","line":16,"column":56,"nodeType":"95","messageId":"96","endLine":16,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":26,"column":55,"nodeType":"95","messageId":"96","endLine":26,"endColumn":57},{"ruleId":"87","severity":1,"message":"101","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":13},{"ruleId":"87","severity":1,"message":"102","line":2,"column":20,"nodeType":"89","messageId":"90","endLine":2,"endColumn":26},{"ruleId":"87","severity":1,"message":"92","line":2,"column":28,"nodeType":"89","messageId":"90","endLine":2,"endColumn":33},{"ruleId":"87","severity":1,"message":"103","line":3,"column":15,"nodeType":"89","messageId":"90","endLine":3,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":36,"column":52,"nodeType":"95","messageId":"96","endLine":36,"endColumn":54},{"ruleId":"93","severity":1,"message":"94","line":59,"column":28,"nodeType":"95","messageId":"96","endLine":59,"endColumn":30},{"ruleId":"97","severity":1,"message":"104","line":67,"column":6,"nodeType":"99","endLine":67,"endColumn":20,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"106","line":80,"column":6,"nodeType":"99","endLine":80,"endColumn":19,"suggestions":"107"},{"ruleId":"93","severity":1,"message":"94","line":84,"column":23,"nodeType":"95","messageId":"96","endLine":84,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":9,"column":29,"nodeType":"95","messageId":"96","endLine":9,"endColumn":31},{"ruleId":"108","severity":1,"message":"109","line":14,"column":7,"nodeType":"110","endLine":14,"endColumn":41},{"ruleId":"83","replacedBy":"111"},{"ruleId":"85","replacedBy":"112"},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Image' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'messageDispatch' and 'user.username'. Either include them or remove the dependency array.","ArrayExpression",["115"],"'Row' is defined but never used.","'Button' is defined but never used.","'useQuery' is defined but never used.","React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["116"],"React Hook useEffect has missing dependencies: 'dispatch' and 'selectedUser.username'. Either include them or remove the dependency array.",["117"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["113"],["114"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [messageData, messageDispatch, messageError, user.username]",{"range":"124","text":"125"},"Update the dependencies array to be: [getMessages, selectedUser]",{"range":"126","text":"127"},"Update the dependencies array to be: [dispatch, messageData, selectedUser.username]",{"range":"128","text":"129"},[1194,1221],"[messageData, messageDispatch, messageError, user.username]",[2049,2063],"[getMessages, selectedUser]",[2340,2353],"[dispatch, messageData, selectedUser.username]"]